using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;

namespace BonafideCertificateGenerator
{
    public class AutoMail : IDisposable
    {
        string toMailId;
        int mailType;
        string body;
        string subject;
        MailMessage msg;
        MailAddress fromMail;
        public AutoMail(string toMailId, string reason, string name, int mailType)
        {
            this.toMailId = toMailId;
            this.mailType = mailType;
            if (mailType == 0)                             //submitted
            {
                subject = "SUBMISSION SUCCESSFUL (" + reason + ")";
                body = "Hello " + name + ",\n\t\tYour request for bona fide certifcate (" + reason + ") was successful done and forwarded to your tutor.\n\n\n\n\nThis is an auto-generated mail from the application.";
            }
            else if (mailType == 1)                     //Approval done
            {
                subject = "APPROVAL DONE (" + reason + ")";
                body = "Hello " + name + ",\n\t\tYour request for bona fide certificate (" + reason + ") was approved by your tutor and forwarded to your department office.\n\n\n\n\nThis is an auto-generated mail from the application.";
            }
            else if (mailType == 2)                     // ready on table
            {
                subject = "BONA FIDE (" + reason + ") IS READY ON TABLE. GET IT NOW FROM DEPARTMENT OFFICE(M-block 3rd Floor)";
                body = "Hello " + name + ",\n\t\tYour bona fide certificate (" + reason + ") is ready on the table. You can get it from your department office (M-Block) 3rd Floor.\n\n\n\n\nThis is an auto-generated mail from the application.";
            }
            else if (mailType == 3)
            {
                subject = "REQUEST (" + reason + ") REJECTED BY YOUR TUTOR";
                body = "Hello " + name + ",\n\t\tYour bona fide request " + reason + " was rejected by your tutor. For Further details meet your tutor or try applying again with valid details.\n\n\n\n\nThis is an auto-generated mail from the application.";
            }
            else if (mailType == 4)
            {
                subject = "BONAFIDE REQUEST " + reason + " FROM " + name;
                body = "Hello Tutor,\n\t\tYou have received a bona fide request (" + reason + ") from " + name + ". Please Approve/Reject the request as soon as possible. \n\n\n\n\nThis is an auto-generated mail from the application.";
            }
            else if (mailType == 5)
            {
                subject = "BONAFIDE REQUEST " + reason + " FROM " + name;
                body = "Hello Admin,\n\t\tYou have received a bona fide request (" + reason + ") from " + name + ". This reuquest has been approved by the respective tutor. Please generate the certificate as soon as possible.\n\n\n\n\nThis is an auto-generated mail from the application.";
            }
        }

        public bool testMail(string EmailID,string Password)
        {
            try
            {
                ThreadPool.QueueUserWorkItem(o =>
                {
                    var smtpServerName = ConfigurationManager.AppSettings["SmtpServer"];
                    var port = ConfigurationManager.AppSettings["Port"];
                    string senderEmailId = ConfigurationManager.AppSettings["SenderEmailId"].ToString();
                    string senderPassword = ConfigurationManager.AppSettings["SenderPassword"].ToString();
                    msg = new MailMessage();
                    fromMail = new MailAddress(senderEmailId);
                    msg.From = fromMail;
                    msg.Subject = subject;
                    msg.Body = "This is autogenerated test Mail form the application. Testing Success.";
                    msg.To.Add(senderEmailId);
                    var smtpClient = new SmtpClient(smtpServerName, Convert.ToInt32(port))
                    {
                        Credentials = new NetworkCredential(senderEmailId, senderPassword),
                        EnableSsl = true
                    };
                    smtpClient.Send(msg);
                });
                return true;
            }
            catch
            {
                return false;
            }
        }
        public bool sendMail()
        {
            try
            {
                ThreadPool.QueueUserWorkItem(o =>
                {
                    var smtpServerName = ConfigurationManager.AppSettings["SmtpServer"];
                    var port = ConfigurationManager.AppSettings["Port"];
                    string senderEmailId = ConfigurationManager.AppSettings["SenderEmailId"].ToString();
                    string senderPassword = ConfigurationManager.AppSettings["SenderPassword"].ToString();
                    
                   
                    msg = new MailMessage();
                    fromMail = new MailAddress(senderEmailId);
                    msg.From = fromMail;
                    msg.Subject = subject;
                    msg.Body = body;
                    msg.To.Add(this.toMailId);
                    var smtpClient = new SmtpClient(smtpServerName, Convert.ToInt32(port))
                    {
                      
                        Credentials = new NetworkCredential(senderEmailId,senderPassword),
                        EnableSsl = true
                    };
                    smtpClient.Send(msg);
                });
                return true;
            }
            catch
            {
                return false;
            }
        }

        #region IDisposable Support
        private bool disposedValue = false;

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    msg.Dispose();
            
                }
                fromMail = null;   
                disposedValue = true;
            }
        }

        ~AutoMail()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
        #endregion
    }
}

